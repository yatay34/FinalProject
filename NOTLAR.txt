PnP = Plug and Play (Tak ve Çalýþtýr)

Business -- API katmaný -- (Android/IOS/UI(Asp.Net)...)
API : Restful mimarisi(standart)ile karþýmýza çýkýyor-->
   JSon formatý sonraki versiyonlarý SOAP mimarisi 
Restful: SOAP ýn daha light ve kullanýþlý bir versiyonudur. 
Farklý sistemlerin birbirini anlayabilmesi için kullanýlan teknlji/standart

DataAccess : sql leri yazýyoruz 
Business : iþ kurallarýný 

LINQ = Language Integrated Query
--------------------------------------------------------------
--------------------------------------------------------------
ctor : constuctor oluþturma snippet

* Çýplak class kalmasýn
* IEntity -- implement eden class bir vt tablosudur. 

* interfacelerin kendileri deðil operasyonlarý PUBLIC tir

Naming Commension (Global Ýsimlendirme)
   -  class local deðiþkenler : _products
--------------------------------------------------------------
--------------------------------------------------------------
ClassLibrary (.NET Standart)  --- DataAccess, Business, Entities
Console App  (.NET Core)      --- UIConsole / ConsoleUI 


DataAccess, Business, Entities projelerine 
     +  Abstract, Concrete klasörleri  
     
               ***** Çýplak class kalmasýn!!   
               IEntity -- implement eden class bir vt tablosudur. 
* Entities >Abstract  +IEntity
* Entities >Concrete  +Product, Category 

Dal(DataAccessLayer)-Dao(DataAccessObject)
.... ADO.Net, EntityFramework, Hibernate, Dapper vb
---- alternatif teknolojileri olan bir þey kodluyorsanýz KLASÖRlemeyi ihmal etme.

* DataAccess >Abstract  +IProductDal
* DataAccess >Concrete  +InMemory, EntityFramework klasörleri..

* DataAccess >Concrete >InMemory > ( InMemoryProductDal.cs : IProductDal )
                        
* Business >Abstract  +IProductService             
--------------------------------------------------------------
3.02.2021 
DataAccess 
** Generic Repository Design Pattern

** Muhtemelen .NetCore 3 yüklü olduðu için v3.1.11; (latestStable 5 = .netCore 5 istiyor!)
  DataAccess : ManageNugetPackages>EntityFrameworkCore.SqlServer v3.1.11 kurduk

  (DbContext bu framework ile gelir! --Context te kullanýyoruz')
  
** Context : db tablolarý ile proje class-larýmýzý iliþkilendirdiðimiz class

** Garbage collector: belli aralýklarla belleði kntrol edip gereksizleri atar. (new lenmiþ class)
**  //IDisposibale Pattern implementation of c#
using (resource){...} -------belleði hýzlýca temizleme
bloðu sona erdiðinde (gel abi topla buralarý)
       garbage collector a gidip beni bellekten at der. içerisine yazýlan nesneler silinir.
       genelde context nesnesi için tanýmlýyoruz. 
       >> context nesnesi biraz pahalý!

///06.02.2021  //Code Refactoring 
//--- CORE Projesi oluþturup ----- ORTAK KODLAR YER ALACAK ((EVRENSEL PROJE)) [ClassLibrary(.NetStandart)]
// Ortak-larý Core altýna taþýyoruz : 
DataAccess > IEntityRepository (Taþýndý)
Entities >   IEntity           (Taþýndý)
+DataAccess>EntityFramework > EfEntityRepositoryBase.cs

SOLUTION: ManageNugetPackages > Microsoft.EntityFrameworkCore.SqlServer v3.1.11 i 
           [Core] Projesine de kur 

DataAccess>Concrete>EntityFramework>EfProductDal:IProductDal 
   sýnýf içeriðini  
   EfEntityRepositoryBase içerisine taþýyor ve editliyoruz. TEntity, TContext olarak

 >>>>  EfProductDal 
           : EfEntityRepositoryBase<Product, NorthwindContext>, IProductDal 


ORDER tablsunu projeye ekliyoruz
1. *Entities   >Concrete > Order 

2. *DataAccess >Abstract > IOrderDal  +
               >Concrete > EntityFramework > EfOrderDal : IOrderDal +
               >Concrete > EntityFramework > NorthwindContext içerisine "Orders" ekle
                (EF, benim Order nesnemi db'deki Orders ile iliþkilendir)

-------------------------------------------------------------------------------- 
Core>Entities > IDto
Entities> DTOs  (Data Transformation Object) :: taþýnacak objeler

Entities> DTOs > ProductDetailDto :IDto 

--------------------------------------------------------------
10.02.2021 10.ders - RESULTs
--------------------------------------------------------------
Core > Utilities (Araçlar) > Results > 
    + IResult, Result, SuccessResult, ErrorResult

Business>Constrants (Northwind'e ait sabitler için)
    + Messages

SOLID = (I) : Kullanmayacaðýn bir þeyi yazma

Core > Utilities (Araçlar) > Results >
    + IDataResult, DataResult, 
     
--------------------------------------------------------------
13.02.2021 11.ders - WebAPI
--------------------------------------------------------------
API = RestFul mimariyi destekler. Restful mimari ile çalýþma ortamý sunar. 
**RestFul Mimari aslýnda, 
geliþtirdiðimiz .Net'i tanýmayan, bir Java uygulamasýný, bir kotlin uygulamasýný,
bir iOs uygulamasýnýn bizim sistemimizle iletiþim kurabilmesini saðlayan ortam.  
**RestFul mimarinin karþýlýðý: 
  Asp.Net WebAPI (.Net), Spring Mvc (Java), Django (Pyhton), Go..

Asp.Net uygulamasý geliþtireceksin. Bunun için þablonlar: 
* API:
Backend de çalýþýr. (bir sunucuda yayýna verilir. Yetki verilen herkes eriþebilir.
Sadece veri transferi için kullanýlýr. 
---> sadece web tabanlý data yönetimi (API de olur. 
Client-side'da kullanýlýr:Angular, React,Vue,Flutter,React-Native,Kotlin,Android)

* MVC (Razor Pages):
herþey server-side yani server tarafýnda gerçekleþir. 
Sadece veri transferi deðil, 
istek karþýlýðýnda ortaya HTML sayfasýnýn çýkmasýný ve talep edene verilmesini saðlar
Html e kadar her þey server da olur.


+ NewProject : Asp.Net Core Web Application > API : "WebAPI"
>> Postman app indir ve kur --Test ortamý  https://www.postman.com/downloads/

(IIS Express -- Apache Tomcat) in karþýlýðý diyebiliriz
(Web API -- Spring MVC ile geliþtirilen RestFUl prjeler )

** Gelen bütün istekleri Controller karþýlar.
   Gelen istek = 
   - Mobil bir uygulama ürünleri listelemek isteleyebilir 
    (Business trflý her bir fonks istek haline getirilir.)
   -tarayýcýdan bir siteye gitmek : "kodlama.io" adresine girmek de bir istek "sayfayý getir"

RESTFUL istekleri HTTP protokolü üzerinden gelir. 
quos? embedded uygulamalar vs cihazlarýn birbirleri ile görüþtürülmesinde TCP 
RESTFUL --> HTTP --> TCP 

*** controller'da size yapýlabilecek istekler kodlanýr. 
Sistemimizi kullanmak isteyen CLÝENTlar BÝZE (operasyonlarýmýza) NASIL ÝSTEKTE BULUNABÝLÝR?
[HttpGet] => insanlar bizim sisteme bir HttpGet isteðinde bulunabilirler

** client: 
tarayýcý, mobil uygulama, desktp/web uygulamasý, Angular/React/Vue... uygulamalarý
--------------------------------------------------------------------------------------
WebAPI > Controllers > 
+New Controller: API Controller EMPTY "ProductsController"

[ApiController]  -> ATTRIBUTE (Java:Annotation)
public class ProductsController : ControllerBase

ATTRIBUTE : bir classla ilgili bilgi verme, onu imzalama
--------------------------------------------------------------------------------------
 public void ConfigureServices(IServiceCollection services)
 {
    services.AddControllers();

    //IoC...bana arka planda bir referans oluþtur.
    //IProductService tipinde bir baðýmlýlýðýn karþýlýðý ProductManager'dýr. 
    //eðer biri IProductService isterse ProductManager oluþturup ver 
    //Singleton--1 defa oluþturur.sonraki her talebe o instance ý gönderir
    //içinde data tutulmuyorsa Singleton kullanýlýr. (sepet uyg kullanýlmaz!!-herkesin sepeti birbirine girer)
    services.AddSingleton<IProductService, ProductManager>();
    services.AddSingleton<IProductDal, EfProductDal>();
             
    //Sadece injection için üst yöntem yetebilirdi ancak
    //AOP:AspectOrientedProgramming-
    //[LogAspect]:fonksiyonlarýn loglanmasý-[Validate][RemoveCache][Transaction][Performance]
    //IoC Container:
    //Autofac,Ninject,CastleWindsor,StructureMap,LightInject,DryInject
  
    


